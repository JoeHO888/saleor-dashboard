stages:
  - test
  - build
  - deploy

######## Default Job Setting ########

variables:
  HD: "/home/user/tmp"
  UN: "user"
  HOST: "api.domain.com"
  APIURI: "graphql"
  VERSION: "main"
  APP_HOST: "dashboard.domain.com"
  APP_MOUNT_URI: "app.domain.com"
  API_URL: "https://$HOST/$APIURI/"
  SERVER_BLOCK_NAME: "saleor-dashboard" 

default:
  image: node:16.20.2 
  before_script:
      - npm install

unit_test:
  stage: test
  allow_failure: true  
  script:
    - npm run test

check_lock:
  stage: test
  allow_failure: true  
  script:
    - npx lockfile-lint --path package-lock.json --allowed-hosts npm yarn

lint:
  stage: test
  allow_failure: true  
  script:
    - npm run lint
    - git diff --exit-code ./src 

check_type:
  stage: test
  allow_failure: true  
  script:
    - npm run check-types    

check_translation_message:
  stage: test
  allow_failure: true  
  script:
    - npm run extract-messages
    - git diff --exit-code ./locale   

build:
  stage: build
  before_script:
    - sed "s|{api_url}|$API_URL|" deploy/template.env | dd status=none of=.env  
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - build/dashboard/
    expire_in: 1 day    

deploy:
  stage: deploy
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no \
      env HD=/home/user/tmp \
      UN=user \
      HOST=api.domain.com \
      APIURI=graphql \
      VERSION=main \
      APP_HOST=dashboard.domain.com \
      APP_MOUNT_URI=app.domain.com \
      'bash -s' < deploy/deploy.sh

new_deploy:
  stage: deploy
  image: valudio/docker-sshpass:latest
  before_script:
    - sed "s|{hd}|$HD|g; s/{app_mount_uri}/$APP_MOUNT_URI/g; s/{host}/$APP_HOST/g" deploy/server_block | dd status=none of=saleor_dashboard_server_block
  script:
# Copy Server Block  
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /var/www/$APP_HOST"
    - sshpass -p $PASS scp -r build/dashboard/ user@$SERVER:$HD    
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mv $HD/dashboard /var/www/$APP_HOST"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo chown -R www-data /var/www/$APP_HOST"    
# Copy Server Block 
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/nginx/sites-available/$SERVER_BLOCK_NAME"       
    - sshpass -p $PASS scp saleor_dashboard_server_block user@$SERVER:$HD
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mv $HD/saleor_dashboard_server_block /etc/nginx/sites-available/$SERVER_BLOCK_NAME"  
# Configure Nginx     
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/nginx/sites-enabled/saleor-dashboard"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo ln -s /etc/nginx/sites-available/saleor-dashboard /etc/nginx/sites-enabled/"    
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl reload nginx "        
